#N canvas 362 0 465 675 10;
#X declare -lib iem_tab;
#X declare -lib iemmatrix;
#X obj 269 -80 loadbang;
#X obj 308 25 pack f f;
#X msg 308 49 set \$1 \$2;
#X msg 269 94 resize \$1;
#X obj 22 -9 *~;
#X obj 47 -12 *~;
#X obj 28 13 +~;
#X obj 29 37 sqrt~;
#X obj 22 -45 rfft~;
#X obj 23 -97 inlet~;
#X obj 331 -105 inlet;
#X obj 23 -72 *~;
#X obj 68 -96 tabreceive~ \$0-hann;
#X obj 268 21 / 2;
#X obj 30 61 tabsend~ one\$0;
#X obj 325 118 table one\$0;
#X obj 269 116 s one\$0;
#N canvas 231 171 489 184 Hann-window 0;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-hann 1 float 0;
#X coords 0 1 1 0 200 120 1;
#X restore 262 37 graph;
#X msg 132 52 resize \$1;
#X obj 132 76 s \$0-hann;
#X obj 30 113 expr ((cos($f1*6.283185))* -0.5)+0.5;
#X obj 30 138 tabwrite \$0-hann;
#X obj 30 64 for++ 0 2048 1;
#X obj 30 91 / 2048;
#X obj 30 21 inlet;
#X obj 30 42 t b f;
#X connect 1 0 2 0;
#X connect 3 0 4 0;
#X connect 5 0 4 1;
#X connect 5 0 6 0;
#X connect 6 0 3 0;
#X connect 7 0 8 0;
#X connect 8 0 5 0;
#X connect 8 1 1 0;
#X connect 8 1 5 1;
#X connect 8 1 6 1;
#X restore 364 19 pd Hann-window;
#X obj 269 -57 t b b;
#X obj 269 -13 \$1;
#X obj 296 -12 \$2;
#X obj 309 70 switch~;
#X obj 331 -61 unpack;
#X obj 268 141 import iem_tab;
#N canvas 696 31 479 559 dct 0;
#X obj 81 -30 mtx;
#X obj 81 -125 t b f f;
#X obj 82 -7 mtx_mul 0;
#X obj 82 15 mtx_cos;
#X obj 43 146 mtx_mul;
#X obj 94 193 outlet;
#X obj 82 62 prepend;
#X obj 82 88 prepend col;
#X obj 43 170 niagara 3;
#N canvas 617 106 467 415 outras 0;
#X obj -124 -254 s \$0um;
#X obj -123 -272 prepend 0;
#X obj -127 -236 for++ 0 1023;
#X obj -132 -136 list-map;
#X obj -132 -115 sum;
#X obj -132 -93 tabwrite \$0dois;
#X obj -133 -185 tab_mul_scalar \$0um \$0tres;
#X obj -127 -214 t f f f;
#X obj -131 -156 tabdump \$0tres;
#X obj -79 -131 cos;
#X text -122 -315 possibilidade de fazer com tables apenas muito mais
pesado mas permite que se opere com vetores maiores que 1024 (matrizes
operam ate isse tamanho);
#X obj -167 41 mtx_mul;
#X obj -167 64 mtx_print;
#X obj -149 13 mtx 10 2;
#X obj -155 -10 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text -164 -65 como funciona a multiplicacao de matrizes;
#X msg 103 -73 1 2 3 4 5 6 7 8 9 10;
#X obj 103 -50 sum;
#X floatatom 117 -20 5 0 0 0 - - -;
#X obj -48 47 mtx_print;
#X msg -89 7 col 2 2 2 2 2 2 2 2 2 2 2;
#X msg -123 -17 col 1 10 0 0 0 0 0 0 0 0 0;
#X msg -168 -46 matrix 1 10 1 2 3 4 5 6 7 8 9 10;
#X connect 1 0 0 0;
#X connect 2 0 7 0;
#X connect 3 0 4 0;
#X connect 3 1 9 0;
#X connect 4 0 5 0;
#X connect 6 0 8 0;
#X connect 7 0 6 0;
#X connect 7 1 5 1;
#X connect 8 0 3 0;
#X connect 9 0 3 1;
#X connect 11 0 12 0;
#X connect 13 0 11 1;
#X connect 13 0 19 0;
#X connect 14 0 13 0;
#X connect 16 0 17 0;
#X connect 17 0 18 0;
#X connect 20 0 13 0;
#X connect 21 0 13 0;
#X connect 22 0 11 0;
#X restore 262 -279 pd outras possibilidades;
#X obj -60 34 inlet;
#X obj -60 83 list prepend matrix 1;
#X obj -60 106 list trim;
#X obj 95 -178 t l b;
#X obj 95 -201 list split 24;
#X obj 94 -222 list prepend;
#X obj 94 -275 for++ 1 24;
#X obj 93 -250 expr ($f1-0.5)*(3.1415/24);
#X obj 83 -147 for++ 1 24;
#X obj 82 112 mtx 24 24;
#X obj 96 -57 prepend matrix 24 1;
#X obj -60 57 list prepend 24;
#X obj 94 -299 loadbang;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 1 1 6 1;
#X connect 1 2 2 1;
#X connect 2 0 3 0;
#X connect 3 0 6 0;
#X connect 4 0 8 0;
#X connect 6 0 7 0;
#X connect 7 0 19 0;
#X connect 8 1 5 0;
#X connect 10 0 21 0;
#X connect 11 0 12 0;
#X connect 12 0 4 0;
#X connect 13 0 20 0;
#X connect 13 1 15 1;
#X connect 14 0 13 0;
#X connect 14 2 15 1;
#X connect 15 0 14 0;
#X connect 16 0 17 0;
#X connect 16 1 18 0;
#X connect 17 0 15 0;
#X connect 18 0 1 0;
#X connect 18 1 19 0;
#X connect 19 0 4 1;
#X connect 20 0 0 1;
#X connect 21 0 11 0;
#X connect 22 0 16 0;
#X restore 117 460 pd dct;
#X obj 265 166 import iemmatrix;
#X obj 117 536 outlet;
#N canvas 542 200 454 339 barkwindow 0;
#X obj 115 123 samplerate~;
#X obj 24 177 expr 13*atan($f1*0.00076)+3.5*atan(pow($f1/7500 \, 2))
;
#X obj 24 225 change;
#X obj 24 199 i;
#X obj 24 263 i;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0bark 25 float 3;
#A 0 0 5 10 15 20 25 31 37 43 51 59 68 79 92 107 126 150 178 212 252
298 354 426 531 1023;
#X coords 0 1024 25 0 200 140 1;
#X restore 233 17 graph;
#X obj 24 311 tabwrite \$0bark;
#X obj 24 287 min 1023;
#X obj 68 265 expr ($f1/2)-1;
#X obj 24 153 expr ($f1)*(($f2)/float($f3));
#X obj 23 10 inlet;
#X obj 23 33 t b f f b f;
#X obj 25 245 b;
#X obj 24 123 for++ 0 2048;
#X connect 0 0 9 1;
#X connect 1 0 3 0;
#X connect 2 0 12 0;
#X connect 3 0 6 1;
#X connect 3 0 2 0;
#X connect 4 0 7 0;
#X connect 7 0 6 0;
#X connect 8 0 7 1;
#X connect 9 0 1 0;
#X connect 10 0 11 0;
#X connect 11 0 13 0;
#X connect 11 1 8 0;
#X connect 11 2 13 1;
#X connect 11 3 0 0;
#X connect 11 4 9 2;
#X connect 12 0 4 0;
#X connect 13 0 4 1;
#X connect 13 0 9 0;
#X restore 373 39 pd barkwindow;
#X obj 39 87 bang~;
#X obj 40 248 tabread \$0bark;
#X obj 131 250 tabread \$0bark;
#X obj 131 230 + 1;
#X obj 40 334 tab_sum one\$0;
#X obj 40 213 t f f;
#X obj 40 312 pack f f;
#X obj 40 267 t f f;
#X obj 40 193 for++ 0 23;
#X obj 85 284 expr if($f1!= 530 \, $f2-($f1+1) \, $f2-$f1);
#X obj 116 392 list prepend;
#X obj 117 415 list split 24;
#X obj 131 363 expr log(if($f1==0 \, 1 \, max($f1 \, 1)));
#X obj 40 110 t b b;
#X obj 67 155 s one\$0;
#X obj 117 436 t l b;
#X text 154 337 I don't know it's necessary;
#X msg 67 135 0 0;
#X obj 331 -83 route set normalize;
#X obj 117 490 spigot 1;
#X obj 185 459 == 0;
#X obj 187 491 spigot 0;
#N canvas 0 0 167 339 normalize 0;
#X obj 52 -148 list split 1;
#X obj 86 -124 list;
#X obj 52 -85 max;
#X obj 52 -107 abs;
#X obj 80 -85 f;
#X msg 68 -169 0;
#X obj 35 -15 /;
#X obj 70 -35 list;
#X obj 33 48 t l b;
#X obj 35 -59 list split 1;
#X obj 35 7 list append;
#X obj 34 -192 t l l b;
#X obj 34 -215 inlet;
#X obj 33 70 outlet;
#X obj 33 28 list split 24;
#X connect 0 0 3 0;
#X connect 0 1 1 0;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 2 0 6 1;
#X connect 3 0 2 0;
#X connect 4 0 2 1;
#X connect 5 0 2 1;
#X connect 6 0 10 0;
#X connect 7 0 9 0;
#X connect 8 0 13 0;
#X connect 8 1 10 1;
#X connect 9 0 6 0;
#X connect 9 1 7 0;
#X connect 10 0 14 0;
#X connect 11 0 9 0;
#X connect 11 1 0 0;
#X connect 11 2 5 0;
#X connect 12 0 11 0;
#X connect 14 0 8 0;
#X connect 14 2 10 1;
#X restore 186 514 pd normalize;
#X connect 0 0 18 0;
#X connect 1 0 2 0;
#X connect 2 0 21 0;
#X connect 3 0 16 0;
#X connect 4 0 6 0;
#X connect 5 0 6 1;
#X connect 6 0 7 0;
#X connect 7 0 14 0;
#X connect 8 0 4 0;
#X connect 8 0 4 1;
#X connect 8 1 5 0;
#X connect 8 1 5 1;
#X connect 9 0 11 0;
#X connect 10 0 46 0;
#X connect 11 0 8 0;
#X connect 12 0 11 1;
#X connect 13 0 3 0;
#X connect 18 0 19 0;
#X connect 18 1 20 0;
#X connect 19 0 1 0;
#X connect 19 0 13 0;
#X connect 19 0 17 0;
#X connect 19 0 27 0;
#X connect 20 0 1 1;
#X connect 22 0 19 0;
#X connect 22 1 20 0;
#X connect 24 0 47 0;
#X connect 24 0 49 0;
#X connect 28 0 41 0;
#X connect 29 0 35 0;
#X connect 30 0 37 1;
#X connect 31 0 30 0;
#X connect 32 1 38 0;
#X connect 33 0 29 0;
#X connect 33 1 31 0;
#X connect 34 0 32 0;
#X connect 35 0 34 0;
#X connect 35 1 37 0;
#X connect 36 0 33 0;
#X connect 37 0 34 1;
#X connect 38 0 39 0;
#X connect 39 0 43 0;
#X connect 39 2 38 1;
#X connect 40 0 38 0;
#X connect 41 0 36 0;
#X connect 41 1 45 0;
#X connect 43 0 24 0;
#X connect 43 1 38 1;
#X connect 45 0 42 0;
#X connect 46 0 22 0;
#X connect 46 1 48 0;
#X connect 46 1 49 1;
#X connect 46 2 21 0;
#X connect 47 0 26 0;
#X connect 48 0 47 1;
#X connect 49 0 50 0;
#X connect 50 0 26 0;
